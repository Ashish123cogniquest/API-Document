import sys, time
import copy
from datetime import datetime, timedelta
sys.path.insert(0, '/home/azureuser/new_dev_icco_api_new_cp/')
sys.path.append('db_mgmt')
from utils.config import db_str_mysql, db_str_mongo, db_str_mongo_new, db_str_mysql_new, db_str_mongo_new_db
import dbApi_mongodb
import mongo_methods
import itertools
import pandas as pd
import table_paginate
import csv
import dbApi_new as dbApi
import dbApi_cp_new as dbApi_cp
import mongo_methods_new as mongo_methods
import mongo_dbapi_cp as mongo_dbapi
import mongo_dbapi_new_cp as mongo_dbapi_new
import copy


def get_all_dat(date_str_list):
    all_dates = []
    all_ui_dates = []
    all_months_years = []
    prev_m_y = ""
    start_date = datetime.now()
    for i in range(1, 31):
    #for i in range(delta.days+1):
        dt1 = start_date + timedelta(days=i)
        dt2 = dt1.strftime("%Y-%m-%d")
        date_ui = dt1.strftime("%d-%b")
        m_y = "%s_%s"%(dt2[5:7], dt2[:4])
        if m_y != prev_m_y:
            all_months_years.append(m_y)
            prev_m_y = m_y
        all_dates.append(dt2)
        all_ui_dates.append(date_ui)
    return all_dates, all_ui_dates, all_months_years

def get_all_dates(date_str_list):
    start_date = datetime.strptime(date_str_list[0].split('T')[0], "%Y-%m-%d")
    end_date = datetime.strptime(date_str_list[1].split('T')[0], "%Y-%m-%d")
    delta = end_date - start_date
    all_dates = []
    all_ui_dates = []
    all_months_years = []
    prev_m_y = ""
    for i in range(delta.days+1):
        dt1 = start_date + timedelta(days=i)
        dt2 = dt1.strftime("%Y-%m-%d")
        date_ui = dt1.strftime("%d-%b")
        m_y = "%s_%s"%(dt2[5:7], dt2[:4])
        if m_y != prev_m_y:
            all_months_years.append(m_y)
            prev_m_y = m_y
        all_dates.append(dt2)
        all_ui_dates.append(date_ui)
    return all_dates, all_ui_dates, all_months_years

def validateFilters(data_key, data_key_cat, filters_cat, filters_val):
    for n, cat in enumerate(filters_cat):
        if cat == "tags":
            return True
        i = data_key_cat.index(cat)
        if data_key[i] not in filters_val[n]:  
            return False
    return True 

def filter_data2(filter_ip_dict, data_dict, data_key_cat, p_index):
    #data_key_cat = ['date', "regions", "subscriptions", "resource providers", "resource", "currency" ]
    active_filters = filter_ip_dict.get('filter', [])
    my_filters = []
    filters_options = []
    ykeys = {}
    for cat in active_filters:
        if cat == "domains":continue
        if cat not in ["subscriptions"]:
            my_filters.append(cat)
            filters_options.append(filter_ip_dict[cat])
    final_dict = {}
    for i, (data_key, cost_list) in enumerate(data_dict.items()):
        cost, cost_p = cost_list[0]
        if my_filters and not validateFilters(data_key, data_key_cat, my_filters, filters_options):
            continue
        date_str = data_key[0]
        sub_pkey = data_key[p_index]
        curr = data_key[4]
        if not final_dict.get(date_str, {}):
            final_dict[date_str] = {}
        sub_cost_temp  = final_dict.get(date_str, {}).get(sub_pkey, [0, 0])[0]
        sub_cost_p_temp  = final_dict.get(date_str, {}).get(sub_pkey, [0, 0])[1]
        #sub_cost = round(sub_cost_temp + cost, 4)
        sub_cost = sub_cost_temp + cost
        sub_cost_p = sub_cost_p_temp + cost_p
        if p_index == 2:
            final_dict[date_str][sub_pkey] = [sub_cost, sub_cost_p, curr, 'Subscription']
        elif p_index == 4:
            final_dict[date_str][sub_pkey] = [sub_cost, sub_cost_p, curr, data_key[3]]
        ykeys[sub_pkey] = 1
    return final_dict, list(ykeys.keys())

def customerUsageDetails_1(data_dict, all_dates, all_ui_dates):
    ykey_cost_dict = {}
    for date_, ykey_dict in data_dict.items():
        for ykey, cost_tup in ykey_dict.items():
            cst_temp = ykey_cost_dict.get(ykey, 0)
            ykey_cost_dict[ykey] = cst_temp+cost_tup[0]
    tup_val = [(v,k)for k,v in ykey_cost_dict.items()]
    tup_val = sorted(tup_val, reverse=True)
    top_7_sub = [k for (v,k) in tup_val[:7]]
    gdata_dict = {}
    for date_, sub_dict in data_dict.items():
        new_sub_dict = {}
        for sub_id, cost_tup in sub_dict.items():
            if sub_id in top_7_sub:
                new_sub_dict[sub_id] = cost_tup
            else:
                cost_o = new_sub_dict.get('Others', (0, '', ''))[0]
                new_sub_dict['Others'] = [cost_o+cost_tup[0], cost_tup[1], cost_tup[2]]
        gdata_dict[date_] = copy.deepcopy(new_sub_dict)
    gykeys = top_7_sub[:]
    if len(tup_val)>7:
        gykeys.append("Others")
    return gdata_dict, gykeys

def currency_handler_ttl(final_dict, file_path):
    currency_conversion_dict = {}
    with open(file_path, 'r') as file:
        csv_reader = csv.reader(file)
        for row in csv_reader:
            from_c, to_c, val = row
            currency_conversion_dict[(from_c, to_c)] = float(val)
    currency_dict = {}
    for date,subs in final_dict.items():
        for sub,vals in subs.items():
            currency = vals[2]
            if currency in currency_dict:
                currency_dict[currency] += 1
            else:
                currency_dict[currency] = 1
    max_val = 0
    currency = ""
    for k,v in currency_dict.items():
        if v > max_val:
            currency, max_val = k,v
    if currency != "USD":
        val = currency_dict.get("USD",0)
        if val == max_val:
            currency = "USD"
    flg = True        
    if len(currency_dict)<=1:flg= False        
    return flg, currency, currency_conversion_dict


def currency_handler(final_dict, file_path):
    currency_conversion_dict = {}
    with open(file_path, 'r') as file:
        csv_reader = csv.reader(file)
        for row in csv_reader:
            from_c, to_c, val = row
            currency_conversion_dict[(from_c, to_c)] = float(val)
    currency_dict = {}
    for date,subs in final_dict.items():
        for sub,vals in subs.items():
            currency = vals[2]
            if currency in currency_dict:
                currency_dict[currency] += 1
            else:
                currency_dict[currency] = 1
    max_val = 0
    currency = ""
    for k,v in currency_dict.items():
        if v > max_val:
            currency, max_val = k,v
    if currency != "USD":
        val = currency_dict.get("USD",0)
        if val == max_val:
            currency = "USD"
    """
    for date1, subs in final_dict.items():
        for sub, vals in subs.items():
            curr = vals[2]
            new_vals = []
            if curr != currency:
                currency_conversion_val = currency_conversion_dict.get((curr, currency), 0.0)
                new_vals = [vals[0]*currency_conversion_val, vals[1]*currency_conversion_val, currency, vals[3]]
                final_dict[date1][sub] = new_vals     
    return final_dict
    """
    new_final_dict = final_dict.copy()
    for date1,subs in final_dict.items():
        for sub,vals in subs.items():
            curr = vals[2]
            new_vals = []
            if curr != currency:
                currency_conversion_val = float(currency_conversion_dict.get((curr, currency),0))
                new_vals = [vals[0]*currency_conversion_val, vals[1]*currency_conversion_val, currency, vals[3]]
            else:
                new_vals = vals
            new_final_dict[date1][sub] = new_vals
    return new_final_dict

def getFinalDictGraph(final_dict, my_ykeys, all_dates, all_ui_dates, flag, type_):
    data_dict_arr_a =[]
    data_dict_arr_p =[]
    temp_dict_p = {}
    temp_dict_a = {}
    for i, date1 in enumerate(all_dates):
        date2 = all_ui_dates[i]
        ykey_dict = final_dict.get(date1, {})
        if 1 in flag:
            temp_dict_p = {"name":date2, "d_date": date1, "opacity":0.7}
        if 0 in flag:
            temp_dict_a = {"name":date2, "d_date": date1, "opacity":0.7}
        total = 0
        total_p = 0
        for ykey in my_ykeys:
            cost_tup = ykey_dict.get(ykey, [0,0,'', 'NA'])
            if 1 in flag:
                temp_dict_p[ykey] = cost_tup[1]
                temp_dict_p['%s_Curr'%ykey] = cost_tup[2]
                temp_dict_p['%s_P'%ykey] = cost_tup[3]
                total_p += cost_tup[1]
            if 0 in flag:
                temp_dict_a[ykey] = cost_tup[0]
                temp_dict_a['%s_Curr'%ykey] = cost_tup[2]
                temp_dict_a['%s_P'%ykey] = cost_tup[3]
                total += cost_tup[0]
        if type_ == 1:
            if 0 in flag:
                temp_dict_a['Total'] = round(total,2)    
            if 1 in flag:
                temp_dict_p['Total'] = round(total_p,2)
        else:
            if 0 in flag:
                temp_dict_a['Total'] = total
            if 1 in flag:
                temp_dict_p['Total'] = total_p

        if temp_dict_a:
            data_dict_arr_a.append(copy.deepcopy(temp_dict_a))
        if temp_dict_p:
            data_dict_arr_p.append(copy.deepcopy(temp_dict_p))
    return data_dict_arr_a, data_dict_arr_p


def getFinalDictTable_new(final_dict, my_ykeys, all_dates, all_ui_dates, flag, subs, userid):
    res_dict = {}
    total_list = []
    total_p_list = []
    curr = "NA"
    tc_data = {}
    expire_time = datetime.utcnow() + timedelta(hours=2)
    for i, date1 in enumerate(all_dates):
        ui_date = all_ui_dates[i]
        ykey_dict = final_dict.get(date1, {})
        val_data = list(final_dict.values())[0].values()
        _,_,curr, ui_k = list(val_data)[0]
        if not ykey_dict:
            for sid in subs:
                ykey_dict[sid] =[0, 0, curr, ui_k]
        cost_subs = list(ykey_dict.keys())
        if  ykey_dict and len(subs)!= len(cost_subs):
            missed_sub = list(set(subs).difference(set(cost_subs)))
            for m_sub in  missed_sub:
                ykey_dict[m_sub] = [0, 0, curr, ui_k]
        total = []
        total_p = []
        for sub, [cost, cost_p, curr, col] in ykey_dict.items():
            tc_list = [sub.replace("-", ""), str(userid), date1.replace("-", "")]
            tc_key = "_".join(tc_list)
            tc_key1 = (sub, date1)
            if 0 in flag and 1 in flag:
                total += [cost]
                total_p += [cost_p]
                if not res_dict.get(sub, ""):
                    res_dict[sub] = {"s1": sub, "data_rows":[[cost],[cost_p]], "data_rows_desc":['A', 'P'], "c":curr}
                else:
                    res_dict[sub]["data_rows"][0] +=[cost]
                    res_dict[sub]["data_rows"][1] +=[cost_p]
                if not tc_data.get(tc_key1, ""):
                    tc_data[tc_key1] = {"key":tc_key,"tx_display_keys":["subscription", "currency", ["Azure", "Partner"], ui_date],"txkeys":["s1", ["A", "P"], date1],"tykeys":["Total"] + subs ,"tdata":{"s1": sub, "data_rows":[[cost],[cost_p]], "data_rows_desc":['A', 'P'], "c":curr}, "expireAt":expire_time}
                else:
                    tc_data[tc_key1]["tdata"]["data_rows"][0][0] +=cost
                    tc_data[tc_key1]["tdata"]["data_rows"][1][0] +=cost_p

            elif 1 in flag:
                total_p += [cost_p]
                if not res_dict.get(sub, ""):
                    res_dict[sub] = {"s1": sub, "data_rows":[[cost_p]], "data_rows_desc":['P'], "c":curr}
                else:
                    res_dict[sub]["data_rows"][0] +=[cost]
                if not tc_data.get(tc_key1, ""):
                    #tc_data[tc_key1] = {"key":tc_key, "tx_display_keys":["subscription", "currency", ["Azure", "Partner"], ui_date],"txkeys":["s1", ["A", "P"], date1],"tykeys":["Total"] + subs ,"tdata":{"s1": sub, "data_rows":[[cost_p]], "data_rows_desc":['P'], "c":curr}, "expireAt":expire_time}
                    tc_data[tc_key1] = {"key":tc_key, "tx_display_keys":["subscription", "currency", ["Partner"], ui_date],"txkeys":["s1", ["A", "P"], date1],"tykeys":["Total"] + subs ,"tdata":{"s1": sub, "data_rows":[[cost_p]], "data_rows_desc":['P'], "c":curr}, "expireAt":expire_time}
                else:
                    tc_data[tc_key1]["tdata"]["data_rows"][0][0] +=cost_p

            elif 0 in flag:
                total += [cost]
                if not res_dict.get(sub, ""):
                    res_dict[sub] = {"s1": sub, "data_rows":[[cost]], "data_rows_desc":['A'], "c":curr}
                else:
                    res_dict[sub]["data_rows"][0] +=[cost]
                if not tc_data.get(tc_key1, ""):
                    #tc_data[tc_key1] = {"key":tc_key, "tx_display_keys":["subscription", "currency", ["Azure", "Partner"], ui_date],"txkeys":["s1", ["A", "P"], date1],"tykeys":["Total"] + subs ,"tdata":{"s1": sub, "data_rows":[[cost]], "data_rows_desc":['A'], "c":curr}, "expireAt":expire_time}
                    tc_data[tc_key1] = {"key":tc_key, "tx_display_keys":["subscription", "currency", ["Azure"], ui_date],"txkeys":["s1", ["A", "P"], date1],"tykeys":["Total"] + subs ,"tdata":{"s1": sub, "data_rows":[[cost]], "data_rows_desc":['A'], "c":curr}, "expireAt":expire_time}
                else:
                    tc_data[tc_key1]["tdata"]["data_rows"][0][0] +=cost

        total_list.append(sum(total))
        total_p_list.append(sum(total_p))

    #add NA if all values are zero
    for sub, date_tc in list(tc_data.keys()):
        if 0 in flag and 1 in flag:
            all_zero_p = all(v == 0 for v in res_dict[sub]["data_rows"][1])
            if all_zero_p:
                res_dict[sub]["data_rows"][1] = [0 for i in range(len(all_dates))]
                #tc_data[(sub, date_tc)]["tdata"]["data_rows"][1] = [0 for i in range(len(all_dates))]
                tc_data[(sub, date_tc)]["tdata"]["data_rows"][1] = [0]
            all_zero_a = all(v == 0 for v in res_dict[sub]["data_rows"][0])
            if all_zero_a:
                res_dict[sub]["data_rows"][0] = [0 for i in range(len(all_dates))]
                #tc_data[(sub, date_tc)]["tdata"]["data_rows"][0] = [0 for i in range(len(all_dates))]
                tc_data[(sub, date_tc)]["tdata"]["data_rows"][0] = [0]
        else:
            #all_zero = all(int(v )== 0 for v in res_dict[sub]["data_rows"][0])
            all_zero = all(float(v )== 0 for v in res_dict[sub]["data_rows"][0])
            if all_zero:
                res_dict[sub]["data_rows"][0] = [0 for i in range(len(all_dates))]
                #tc_data[(sub, date_tc)]["tdata"]["data_rows"][0] = [0 for i in range(len(all_dates))]
                tc_data[(sub, date_tc)]["tdata"]["data_rows"][0] = [0]

    all_subs = ['total'] + list(res_dict.keys())
    if 0 in flag and 1 in flag:
        if not total_list:
            total_list = [0 for i in range(len(all_dates))]
        if not total_p_list:
            total_p_list = [0 for i in range(len(all_dates))]
        res_dict["total"] = {"s1": "Total", "data_rows":[total_list, total_p_list], "data_rows_desc":['A', 'P'], "c":curr}
    elif 1 in flag:
        if not total_p_list:
            total_p_list = [0 for i in range(len(all_dates))]
        res_dict["total"] = {"s1": "Total", "data_rows":[total_p_list], "data_rows_desc":['P'], "c":curr}
    elif 0 in flag:
        if not total_list:
            total_list = [0 for i in range(len(all_dates))]
        res_dict["total"] = {"s1": "Total", "data_rows":[total_list], "data_rows_desc":['A'], "c":curr}
    data_dict_arr = [res_dict[k1] for k1 in all_subs]
    gc_data = list(tc_data.values())
    if gc_data:
        mongo_dbapi.insertdata2(db_str_mongo_new_db, "graph_click_data", gc_data)
    return data_dict_arr


def getFinalDictTable(final_dict, my_ykeys, all_dates, all_ui_dates, flag, subs):
    res_dict = {}
    total_list = []
    total_p_list = []
    curr = "NA"
    for i, date1 in enumerate(all_dates):
        ykey_dict = final_dict.get(date1, {})
        val_data = list(final_dict.values())[0].values()
        _,_,curr, ui_k = list(val_data)[0]
        if not ykey_dict:
            for sid in subs:
                ykey_dict[sid] =[0, 0, curr, ui_k]
        cost_subs = list(ykey_dict.keys())
        if  ykey_dict and len(subs)!= len(cost_subs):
            missed_sub = list(set(subs).difference(set(cost_subs)))
            for m_sub in  missed_sub:
                ykey_dict[m_sub] = [0, 0, curr, ui_k]
        total = []
        total_p = []
        for sub, [cost, cost_p, curr, col] in ykey_dict.items():
            if 0 in flag and 1 in flag:
                total += [cost]
                total_p += [cost_p]
                if not res_dict.get(sub, ""):
                    res_dict[sub] = {"s1": sub, "data_rows":[[cost],[cost_p]], "data_rows_desc":['A', 'P'], "c":curr}
                else:
                    res_dict[sub]["data_rows"][0] +=[cost]
                    res_dict[sub]["data_rows"][1] +=[cost_p]
            elif 1 in flag:
                total_p += [cost_p]
                if not res_dict.get(sub, ""):
                    res_dict[sub] = {"s1": sub, "data_rows":[[cost_p]], "data_rows_desc":['P'], "c":curr}
                else:
                    res_dict[sub]["data_rows"][0] +=[cost]
            elif 0 in flag:
                total += [cost]
                if not res_dict.get(sub, ""):
                    res_dict[sub] = {"s1": sub, "data_rows":[[cost]], "data_rows_desc":['A'], "c":curr}
                else:
                    res_dict[sub]["data_rows"][0] +=[cost]
        total_list.append(sum(total))
        total_p_list.append(sum(total_p))
        
            
    #add NA if all values are zero
    for sub in list(res_dict.keys()):
        if 0 in flag and 1 in flag:
            all_zero_p = all(v == 0 for v in res_dict[sub]["data_rows"][1])
            if all_zero_p:
                res_dict[sub]["data_rows"][1] = [0 for i in range(len(all_dates))]
            all_zero_a = all(v == 0 for v in res_dict[sub]["data_rows"][0])
            if all_zero_a:
                res_dict[sub]["data_rows"][0] = [0 for i in range(len(all_dates))]
        else:
            all_zero = all(int(v )== 0 for v in res_dict[sub]["data_rows"][0])
            if all_zero:
                res_dict[sub]["data_rows"][0] = [0 for i in range(len(all_dates))]

    all_subs = ['total'] + list(res_dict.keys())
    if 0 in flag and 1 in flag:
        if not total_list:
            total_list = [0 for i in range(len(all_dates))]
        if not total_p_list:
            total_p_list = [0 for i in range(len(all_dates))]
        res_dict["total"] = {"s1": "Total", "data_rows":[total_list, total_p_list], "data_rows_desc":['A', 'P'], "c":curr}
    elif 1 in flag:
        if not total_p_list:
            total_p_list = [0 for i in range(len(all_dates))]
        res_dict["total"] = {"s1": "Total", "data_rows":[total_p_list], "data_rows_desc":['P'], "c":curr}
    elif 0 in flag:
        if not total_list:
            total_list = [0 for i in range(len(all_dates))]
        res_dict["total"] = {"s1": "Total", "data_rows":[total_list], "data_rows_desc":['A'], "c":curr}
    data_dict_arr = [res_dict[k1] for k1 in all_subs]
    return data_dict_arr

def getTableClickData(final_dict, my_ykeys, all_dates, all_ui_dates, flag):
    data_dict_arr =[]
    new_ykeys = []
    for i, date1 in enumerate(all_dates):
        #date2 = all_ui_dates[i]
        ykey_dict = final_dict.get(date1, {})
        temp_dict = {"name":"Cost", "d_date": date1}
        total = 0
        currency = "USD"
        cat = 'NA'
        for ykey in my_ykeys:
            cost_tup = ykey_dict.get(ykey, [0, 0,'', 'NA'])
            if flag:
                if round(cost_tup[0], 2)<=0:continue
                temp_dict[ykey] = cost_tup[0]
                total+=cost_tup[0]
            else:
                if round(cost_tup[1], 2)<=0:continue
                temp_dict[ykey] = cost_tup[1]
                total+=cost_tup[1]
            temp_dict['%s_Curr'%ykey] = cost_tup[2]
            temp_dict['%s_P'%ykey] = cost_tup[3]
            currency = cost_tup[2]
            cat = cost_tup[3]
            new_ykeys.append(ykey) 
        temp_dict["Total"] = round(total, 2)
        temp_dict['Total_Curr'] = currency
        temp_dict['Total_P']  = cat
        data_dict_arr.append(copy.deepcopy(temp_dict))
    return data_dict_arr, new_ykeys

def get_graph_data(final_dict, distinct_ykeys, all_dates, all_ui_dates, flag, type_ = 1):    
    gdata_dict, graph_ykeys = customerUsageDetails_1(final_dict, all_dates, all_ui_dates)
    final_gdata_arr_a, final_gdata_arr_p = getFinalDictGraph(gdata_dict, distinct_ykeys, all_dates, all_ui_dates, flag, type_)
    return final_gdata_arr_a,final_gdata_arr_p,distinct_ykeys
 
def getCostByDateAndSid_daily(data_dict):
    sid = data_dict["sub_id"]
    sid_new = sid.replace("-","")
    date_ = data_dict["date"]
    userid = data_dict["userid"]
    ## flag 1 -- Azure Cost, flag 0 -- Partner Cost
    flag = data_dict.get("flag", 1)
    y,m,d = date_.split("-")
    date_obj = datetime.strptime(date_, "%Y-%m-%d")
    date_ui = date_obj.strftime("%d-%b")
    data_key_cat = ['date', "regions", "subscriptions", "rproviders", "currency" ]
    all_ykeys = []
    response = {}
    collection_name = "table_click_data"
    key = "%s_%s_%s%s%s_%s"%(sid_new, userid, y, m, d, flag)
    data_dict = mongo_methods.get_sub_tc_data(db_str_mongo_new_db, collection_name, key)
    response = {"tdata":[{}], "txkeys":["cost"], "tykeys":[]}
    if data_dict and data_dict["tdata"]:
        new_tdata = {}
        total = 0
        total_Curr = ""
        total_P = ""
        for k,v in data_dict["tdata"].items():
            if type(v) == float:
                total += v
            if k[-5:] == "_Curr":
                total_Curr = v
            if k[-2:] == "_P":
                total_P = v
            new_tdata[k] = v
        new_tdata.update({"total":total, "total_Curr":total_Curr, "total_P":total_P})
        response = {"tdata":[new_tdata], "txkeys":data_dict["txkeys"], "tykeys":data_dict["tykeys"]}
        #print(response)
   
    #else:
    #    collection_name2 = "%s_%s_%s"%(sid_new, m, y)
    #    cust_data, all_ykeys = mongo_methods.get_cost_by_date_old(db_str_mongo_new, collection_name2, date_, sid)
    #    all_ykeys = list(set(all_ykeys))
    #    final_tdata_arr, all_ykeys = getTableClickData(cust_data, all_ykeys, [date_], [date_ui], flag)
    #    response = { "tdata": final_tdata_arr, "txkeys":['Cost'], "tykeys":all_ykeys }
    
    return response

def get_dates_by_string(date_):
    day_range, short_month, short_year = date_.split("/")
    start_day, end_day = day_range.split("-")
    month_number = datetime.strptime(short_month, "%b").month
    if month_number < 10:
        month_number = "0"+str(month_number)
    else:
        month_number = str(month_number)
    dates = []
    for i in range(int(start_day), int(end_day)+1):
        if i<10:
            day = "0" + str(i)
        else:
            day = str(i)
        _date = "20%s-%s-%s"%(short_year, month_number, day)
        dates.append(_date)
    return dates    


def getCostByDateAndSid_monthly(data_dict):
    sid = data_dict["sub_id"]
    sid_new = sid.replace("-","")
    date_ = data_dict["date"]
    dates = get_dates_by_string(date_)
    userid = data_dict["userid"]
    ## flag 1 -- Azure Cost, flag 0 -- Partner Cost
    flag = data_dict.get("flag", 1)
    date_ui = date_
    data_key_cat = ['date', "regions", "subscriptions", "rproviders", "currency" ]
    all_ykeys = []
    response = {}
    collection_name = "table_click_data"
    key_list = []
    response = {"tdata":[{}], "txkeys":["Cost"], "tykeys":[]}
    data_dict = {"tdata":{}, "txkeys":["Cost"], "tykeys":[]}
    temp_tykeys = []
    for _date in dates:
        y,m,d = _date.split("-")
        key = "%s_%s_%s%s%s_%s"%(sid_new, userid, y, m, d, flag)
        cur_data_dict = mongo_methods.get_sub_tc_data(db_str_mongo_new_db, collection_name, key)
        if not cur_data_dict:
            continue
        tdata = cur_data_dict["tdata"]
        txkeys = cur_data_dict["txkeys"]
        tykeys = cur_data_dict["tykeys"]
        for k,v in tdata.items():
            if k in data_dict["tdata"] and isinstance(v,float):
                data_dict["tdata"][k] += v
            else:
                data_dict["tdata"][k] = v
        data_dict["txkeys"] = txkeys
        temp_tykeys += tykeys
    data_dict["tykeys"] = list(set(temp_tykeys)) 
    if data_dict["tdata"]:
        new_tdata = {}
        total = 0
        total_Curr = ""
        total_P = ""
        for k,v in data_dict["tdata"].items():
            if type(v) == float:
                total += v
            if k[-5:] == "_Curr":
                total_Curr = v
            if k[-2:] == "_P":
                total_P = v
            new_tdata[k] = v
        new_tdata.update({"total":total, "total_Curr":total_Curr, "total_P":total_P})
        response = {"tdata":[new_tdata], "txkeys":data_dict["txkeys"], "tykeys":data_dict["tykeys"]}
    #else:
    #    collection_name2 = "%s_%s_%s"%(sid_new, m, y)
    #    #cust_data, all_ykeys = mongo_methods.get_cost_by_date_old(db_str_mongo_new, collection_name2, date_, sid)
    #    cust_data, all_ykeys = mongo_methods.get_cost_by_date_old_monthly(db_str_mongo_new, collection_name2, dates, sid)
    #    all_ykeys = list(set(all_ykeys))
    #    #final_tdata_arr, all_ykeys = getTableClickData(cust_data, all_ykeys, dates, [date_ui], flag)
    #    final_tdata_arr, all_ykeys = getTableClickData(cust_data, all_ykeys, dates, dates, flag)
    #    res_tdata = {}
    #    for data in final_tdata_arr:
    #        for k,v in data.items():
    #            if k in res_tdata and isinstance(v,float):
    #                res_tdata[k] += v
    #            else:
    #                res_tdata[k] = v                   
    #    response = { "tdata": [res_tdata], "txkeys":['Cost'], "tykeys":all_ykeys }
    return response

def getCostByDateAndSid(data_dict):
    filter_by = data_dict["filter_by"]
    if filter_by == "Daily":
        response = getCostByDateAndSid_daily(data_dict)
    elif filter_by == "Monthly":
        response = getCostByDateAndSid_monthly(data_dict)
    return response

def getCustomerFilterData(data_dict):
    cust_name = data_dict["cust_name"]
    uid = data_dict.get("userid", 0)
    domains, subs = dbApi.get_subs_domain(db_str_mysql, uid, cust_name)
    res_dict =  mongo_methods.read_customer_filter_data(db_str_mongo, cust_name)

    if not domains:
        domains = res_dict.get("domains",[])
    if not subs:
        subs = res_dict.get("sub", [])
    else:
        ri_sub = [r for r in res_dict.get("sub", []) if "ri_cost"  in r]
        subs+=ri_sub
    domains = list(set(domains))
    subs = list(set(subs))
    permissions = list(dbApi.get_permission_new(db_str_mysql, uid))[0]
    if "2" not in permissions:
        subs = [sub for sub in subs if "ri_cost" not in sub]
    return {"Subscription": subs, "rproviders":res_dict.get('resource_provider',[]) , "Region":res_dict.get("regions",[]), "Tags":res_dict.get("tags",[]), "domains":domains}

def fill_zero(subs, all_dates, flag):
    #subs = subs+["Total"]
    subs = ["Total"]+subs
    zero_list = [0 for i in range(len(all_dates))]
    res_list = []
    for sub in subs:
        curr = mongo_methods.get_currency_by_sub(db_str_mongo_new, sub)
        if 0 in flag and 1 in flag:
            temp_dict = {'s1': sub, 'data_rows':[zero_list, zero_list], 'data_rows_desc': ['A', 'P'], 'c': curr}
        elif 0 in flag:
            temp_dict = {'s1': sub, 'data_rows':[zero_list], 'data_rows_desc': ['A'], 'c': curr}
        else:
            temp_dict = {'s1': sub, 'data_rows':[zero_list], 'data_rows_desc': ['P'], 'c': curr}
        res_list.append(temp_dict)
    return res_list
    
    
def get_subscription_for_domain(domains, cust_id):
    cust_cred_ids = dbApi.get_customer_cred_ids(db_str_mysql)
    cred_ids =  dbApi.get_domain_cred_id(db_str_mysql, domains)
    cred_ids = [cred for cred in cred_ids if cust_cred_ids.get(cred,0)==cust_id]
    subs = dbApi.get_cred_id_subs_new(db_str_mysql, cred_ids, cust_id)
    if not subs:
        subs = mongo_methods.get_all_subs_cred_id(db_str_mongo, cred_ids)
    return subs

def filter_data(filter_ip_dict, data_dict, data_key_cat, p_index, user_id, rid_dict ):
    #data_key_cat = ['date', "regions", "subscriptions", "resource providers", "resource", "currency" ]
    active_filters = filter_ip_dict.get('filter', [])
    my_filters = []
    filters_options = []
    ykeys = {}
    for cat in active_filters:
        if cat == "domains":continue
        if cat not in ["subscriptions"]:
            my_filters.append(cat)
            filters_options.append(filter_ip_dict[cat])
    final_dict = {}
    table_click = {}
    graph_click = {}
    del_keys = {}
    for i, (data_key, cost_list) in enumerate(data_dict.items()):
        cost, cost_p = cost_list[0]
        if my_filters and not validateFilters(data_key, data_key_cat, my_filters, filters_options):
            continue
        date_str = data_key[0]
        sub_pkey = data_key[p_index]
        curr = data_key[4]
        if not final_dict.get(date_str, {}):
            final_dict[date_str] = {}
        sub_cost_temp  = final_dict.get(date_str, {}).get(sub_pkey, [0, 0])[0]
        sub_cost_p_temp  = final_dict.get(date_str, {}).get(sub_pkey, [0, 0])[1]
        #sub_cost = round(sub_cost_temp + cost, 4)
        sub_cost = sub_cost_temp + cost
        sub_cost_p = sub_cost_p_temp + cost_p
        if p_index == 2:
            key = data_key
            sub = sub_pkey
            month_year = key[0].split("-")[:-1]
            month_year = "_".join(month_year[::-1])
            table_col_name = "%s_%s_TC"%(sub.replace("-", ""), month_year)
            graph_col_name = "%s_%s_GC"%(sub.replace("-", ""), month_year)
            expire_time = datetime.utcnow() + timedelta(hours=0.5)
            if not table_click.get(table_col_name, {}):
                table_click[table_col_name] = {}
            if not graph_click.get(graph_col_name, {}):
                graph_click[graph_col_name] = {}

            click_key = (sub, key[0])
            rids = rid_dict.get(key, [])
            query = {"user_id":user_id,"sub":sub, "date":key[0]}
            if not del_keys.get(table_col_name, {}):
                del_keys[table_col_name] ={"user_id":user_id,"sub":{"$in":[sub]}, "date":{"$in":[key[0]]}}
            else:
                del_keys[table_col_name]["sub"]["$in"] = list(set(del_keys[table_col_name]["sub"]["$in"]+[sub]))
                del_keys[table_col_name]["date"]["$in"] = list(set(del_keys[table_col_name]["date"]["$in"]+ [key[0]]))

            if not table_click[table_col_name].get(key, {}):
                temp_dict = {"user_id":user_id,"sub":sub, "date":key[0] , "rprovider":key[3], "rids":rids , "cost" :cost,"cost_p":cost_p,"currency":key[-1], "expireAt": expire_time}
                table_click[table_col_name][key] = temp_dict
            else:
                table_click[table_col_name][key]["cost"] += cost
                table_click[table_col_name][key]["cost_p"] += cost_p
                table_click[table_col_name][key]["rids"].append(rids)
            if not graph_click[graph_col_name].get(key, {}):
                temp_dict = {"user_id":user_id,"sub":sub, "date":key[0] , "cost":cost , "cost_p" :cost_p, "currency":curr, "expireAt": expire_time}
                graph_click[graph_col_name][key] = temp_dict
            else:
                graph_click[graph_col_name][key]["cost"] += cost
                graph_click[graph_col_name][key]["cost_p"] += cost_p

            final_dict[date_str][sub_pkey] = [sub_cost, sub_cost_p, curr, 'Subscription']
        elif p_index == 4:
            final_dict[date_str][sub_pkey] = [sub_cost, sub_cost_p, curr, data_key[3]]
        ykeys[sub_pkey] = 1
    return final_dict, list(ykeys.keys()), graph_click, table_click, del_keys

def filter_data_new(filter_ip_dict, data_dict, data_key_cat, p_index, user_id, all_dates):
    #data_key_cat = ['date', "regions", "subscriptions", "resource providers", "resource", "currency" ]
    active_filters = filter_ip_dict.get('filter', [])
    my_filters = []
    filters_options = []
    ykeys = {}
    for cat in active_filters:
        if cat == "domains":continue
        if cat not in ["subscriptions"]:
            my_filters.append(cat)
            filters_options.append(filter_ip_dict[cat])
    final_dict = {}
    table_click_new = {}
    for i, (data_key, cost_list) in enumerate(data_dict.items()):
        cost, cost_p = cost_list[0]
        if my_filters and not validateFilters(data_key, data_key_cat, my_filters, filters_options):
            continue
        dt, loc, sub, rp, rname, curr = data_key
        y, m, d = dt.split("-")
        new_sub = sub.replace("-","")
        tb_key1 = "%s_%s_%s%s%s_%s"%(new_sub, user_id, y, m, d, 1)
        tb_key2 = "%s_%s_%s%s%s_%s"%(new_sub, user_id, y, m, d, 0)
        cur_dict1 = {rname: cost, "%s_Curr"%rname: curr, "%s_P"%rname: rp}
        cur_dict2 = {rname: cost_p, "%s_Curr"%rname: curr, "%s_P"%rname: rp}
        expire_time = datetime.utcnow() + timedelta(hours=2)
        if tb_key1 in table_click_new:
            cur_tdata = table_click_new[tb_key1]["tdata"].get(rname)
            if cur_tdata:
                cur_dict1[rname]+=cur_tdata
            table_click_new[tb_key1]["tdata"].update(cur_dict1)
            table_click_new[tb_key1]["tykeys"].append(rname)
        else:
            table_click_new[tb_key1] = {"key":tb_key1, "tdata":cur_dict1, "txkeys":["Cost"], "tykeys":[rname], "expire_time":expire_time}
        if tb_key2 in table_click_new:
            cur_tdata = table_click_new[tb_key2]["tdata"].get(rname)
            if cur_tdata:
                cur_dict2[rname]+=cur_tdata
            table_click_new[tb_key2]["tdata"].update(cur_dict2)
            table_click_new[tb_key2]["tykeys"].append(rname)
        else:
            table_click_new[tb_key2] = {"key":tb_key2, "tdata":cur_dict2, "txkeys":["Cost"], "tykeys":[rname], "expire_time":expire_time} 
        date_str = data_key[0]
        sub_pkey = data_key[p_index]
        curr = data_key[5]
        if not final_dict.get(date_str, {}):
            final_dict[date_str] = {}
        sub_cost_temp  = final_dict.get(date_str, {}).get(sub_pkey, [0, 0])[0]
        sub_cost_p_temp  = final_dict.get(date_str, {}).get(sub_pkey, [0, 0])[1]
        #sub_cost = round(sub_cost_temp + cost, 4)
        sub_cost = sub_cost_temp + cost
        sub_cost_p = sub_cost_p_temp + cost_p
        if p_index == 2:
            final_dict[date_str][sub_pkey] = [sub_cost, sub_cost_p, curr, 'Subscription']
        elif p_index == 4:
            final_dict[date_str][sub_pkey] = [sub_cost, sub_cost_p, curr, data_key[3]]
        ykeys[sub_pkey] = 1
    if 1:
        expire_time = datetime.utcnow() + timedelta(hours=2)
        subs = filter_ip_dict["subscriptions"]
        for sub in subs:
            new_sub = sub.replace("-","")
            for dt in all_dates:
                y, m, d = dt.split("-")
                tb_key1 = "%s_%s_%s%s%s_%s"%(new_sub, user_id, y, m, d, 1)
                tb_key2 = "%s_%s_%s%s%s_%s"%(new_sub, user_id, y, m, d, 0)
                if tb_key1 not in table_click_new:
                    table_click_new[tb_key1] = {"key":tb_key1, "tdata":{}, "txkeys":["Cost"], "tykeys":[], "expire_time":expire_time}
                if tb_key2 not in table_click_new:
                    table_click_new[tb_key2] = {"key":tb_key2, "tdata":{}, "txkeys":["Cost"], "tykeys":[], "expire_time":expire_time}
    flg, main_curr, curr_conv_dict = currency_handler_ttl(final_dict, "/home/azureuser/co_dev/Currency_data.csv")    
    if flg:
        final_dict, ykeys_sp = filter_data_curr_conv(filter_ip_dict, data_dict, data_key_cat, p_index, user_id, main_curr, curr_conv_dict)
        return final_dict, ykeys_sp  
    else:    
        tc_data = table_click_new.values()
        #print(tc_data)
        if tc_data:
            mongo_dbapi.insertdata2(db_str_mongo_new_db, "table_click_data", tc_data)
        return final_dict, list(ykeys.keys())

def filter_data_curr_conv(filter_ip_dict, data_dict, data_key_cat, p_index, user_id, main_curr, curr_conv_dict):
    #data_key_cat = ['date', "regions", "subscriptions", "resource providers", "resource", "currency" ]
    active_filters = filter_ip_dict.get('filter', [])
    my_filters = []
    filters_options = []
    ykeys = {}
    for cat in active_filters:
        if cat == "domains":continue
        if cat not in ["subscriptions"]:
            my_filters.append(cat)
            filters_options.append(filter_ip_dict[cat])
    final_dict = {}
    table_click_new = {}
    for i, (data_key, cost_list) in enumerate(data_dict.items()):
        cost, cost_p = cost_list[0]
        if my_filters and not validateFilters(data_key, data_key_cat, my_filters, filters_options):
            continue
        dt, loc, sub, rp, rname, curr = data_key
        new_cost, new_cost_p = cost_list[0]
        if curr != main_curr:
            new_cost = cost*curr_conv_dict.get((curr, main_curr), 0)
            new_cost_p = cost_p*curr_conv_dict.get((curr, main_curr), 0)
        y, m, d = dt.split("-")
        new_sub = sub.replace("-","")
        tb_key1 = "%s_%s_%s%s%s_%s"%(new_sub, user_id, y, m, d, 1)
        tb_key2 = "%s_%s_%s%s%s_%s"%(new_sub, user_id, y, m, d, 0)
        cur_dict1 = {rname: new_cost, "%s_Curr"%rname: curr, "%s_P"%rname: rp}
        cur_dict2 = {rname: new_cost_p, "%s_Curr"%rname: curr, "%s_P"%rname: rp}
        expire_time = datetime.utcnow() + timedelta(hours=2)
        if tb_key1 in table_click_new:
            cur_tdata = table_click_new[tb_key1]["tdata"].get(rname)
            if cur_tdata:
                cur_dict1[rname]+=cur_tdata
            table_click_new[tb_key1]["tdata"].update(cur_dict1)
            table_click_new[tb_key1]["tykeys"].append(rname)
        else:
            table_click_new[tb_key1] = {"key":tb_key1, "tdata":cur_dict1, "txkeys":["Cost"], "tykeys":[rname], "expire_time":expire_time}
        if tb_key2 in table_click_new:
            cur_tdata = table_click_new[tb_key2]["tdata"].get(rname)
            if cur_tdata:
                cur_dict2[rname]+=cur_tdata
            table_click_new[tb_key2]["tdata"].update(cur_dict2)
            table_click_new[tb_key2]["tykeys"].append(rname)
        else:
            table_click_new[tb_key2] = {"key":tb_key2, "tdata":cur_dict2, "txkeys":["Cost"], "tykeys":[rname], "expire_time":expire_time} 
        date_str = data_key[0]
        sub_pkey = data_key[p_index]
        curr = data_key[5]
        if not final_dict.get(date_str, {}):
            final_dict[date_str] = {}
        sub_cost_temp  = final_dict.get(date_str, {}).get(sub_pkey, [0, 0])[0]
        sub_cost_p_temp  = final_dict.get(date_str, {}).get(sub_pkey, [0, 0])[1]
        #sub_cost = round(sub_cost_temp + cost, 4)
        sub_cost = sub_cost_temp + cost
        sub_cost_p = sub_cost_p_temp + cost_p
        if p_index == 2:
            final_dict[date_str][sub_pkey] = [sub_cost, sub_cost_p, curr, 'Subscription']
        elif p_index == 4:
            final_dict[date_str][sub_pkey] = [sub_cost, sub_cost_p, curr, data_key[3]]
        ykeys[sub_pkey] = 1
    tc_data = table_click_new.values()
    if tc_data:
        mongo_dbapi.insertdata2(db_str_mongo_new_db, "table_click_data", tc_data)
    return final_dict, list(ykeys.keys())



def insert_click_data(graph_click_data, table_click_data):
    db_str = "52.249.197.205#27017#cq_user#User@123#index_db"
    for col, table_dict in table_click_data.items():
        data_dict_list = list(table_dict.values())
        mongo_dbapi.insertdata2(db_str, col, data_dict_list)
    for col, graph_dict in graph_click_data.items():
        data_dict_list = list(graph_dict.values())
        mongo_dbapi.insertdata2(db_str, col, data_dict_list)

def monthly_cost_tdata(data, all_dates):
    result = []
    for data_dict in data:
        s1 = data_dict["s1"]
        data_rows = data_dict["data_rows"]
        data_rows_desc = data_dict["data_rows_desc"]
        curr = data_dict["c"]
        new_dict = {"s1":s1, "data_rows":{}, "data_rows_desc":data_rows_desc, "c":curr}
        data_rows_dict = {}
        for (i,_date) in enumerate(all_dates):
            y, m, d = _date.split("-")
            k = "%s_%s"%(y,m)
            if k in data_rows_dict:
                data_rows_dict[k][0][0]+= data_rows[0][i]
                data_rows_dict[k][1][0] += data_rows[1][i]
            else:
                data_rows_dict[k] = [[data_rows[0][i]], [data_rows[1][i]]]
                
        new_dict["data_rows"] = list(data_rows_dict.values())[0]
        result.append(new_dict)
    return result 

def monthly_cost_tdata_new(data,all_dates):
    result = []
    for data_dict in data:
        s1 = data_dict["s1"]
        data_rows = data_dict["data_rows"]
        data_rows_desc = data_dict["data_rows_desc"]
        curr = data_dict["c"]
        new_dict = {"s1":s1, "data_rows":{}, "data_rows_desc":data_rows_desc, "c":curr}
        data_rows_dict = {}
        for (i,_date) in enumerate(all_dates):
            y, m, d = _date.split("-")
            k = "%s_%s"%(y,m)
            if k in data_rows_dict:
                if len(data_rows)>0:
                    data_rows_dict[k][0][-1]+= data_rows[0][i]
                if len(data_rows)>1:    
                    data_rows_dict[k][1][-1] += data_rows[1][i]
            else:
                data_rows_dict[k] = [[], []]
                if len(data_rows)>0:
                    data_rows_dict[k][0].append(data_rows[0][i])
                else:
                    data_rows_dict[k][0].append(0)
                if len(data_rows)>1:    
                    data_rows_dict[k][1].append(data_rows[1][i])
                else:
                     data_rows_dict[k][1].append(0)
        cur_res = []
        for k1,v1 in data_rows_dict.items():
            if not cur_res:
                cur_res = v1
            else:
                cur_res[0].append(v1[0][0])
                cur_res[1].append(v1[1][0])
        new_dict["data_rows"] = cur_res
        result.append(new_dict)
    return result

def monthly_cost_tdata_new2(data,all_dates):
    result = []
    for data_dict in data:
        s1 = data_dict["s1"]
        data_rows = data_dict["data_rows"]
        data_rows_desc = data_dict["data_rows_desc"]
        curr = data_dict["c"]
        new_dict = {"s1":s1, "data_rows":{}, "data_rows_desc":data_rows_desc, "c":curr}
        data_rows_dict = {}
        for (i,_date) in enumerate(all_dates):
            y, m, d = _date.split("-")
            k = "%s_%s"%(y,m)
            if k in data_rows_dict:
                if len(data_rows) == 2:
                    data_rows_dict[k][0][-1]+= data_rows[0][i]
                    data_rows_dict[k][1][-1] += data_rows[1][i]
                else:
                    data_rows_dict[k][0][-1]+= data_rows[0][i]
            else:
                if len(data_rows) == 2:
                    data_rows_dict[k] = [[], []]
                    data_rows_dict[k][0].append(data_rows[0][i])
                    data_rows_dict[k][1].append(data_rows[1][i])
                else:
                    data_rows_dict[k] = [[]]
                    data_rows_dict[k][0].append(data_rows[0][i]) 
            """
            if k in data_rows_dict:
                if len(data_rows) == 2:
                    data_rows_dict[k][0][-1]+= round(data_rows[0][i],2)
                    data_rows_dict[k][1][-1] += round(data_rows[1][i],2)
                else:
                    data_rows_dict[k][0][-1]+= round(data_rows[0][i],2)
            else:
                if len(data_rows) == 2:
                    data_rows_dict[k] = [[], []]
                    data_rows_dict[k][0].append(round(data_rows[0][i],2))
                    data_rows_dict[k][1].append(round(data_rows[1][i],2))
                else:
                    data_rows_dict[k] = [[]]
                    data_rows_dict[k][0].append(round(data_rows[0][i],2))
            """
        cur_res = []
        if len(data_rows) == 2:
            for k1,v1 in data_rows_dict.items():
                if not cur_res:
                    cur_res = v1
                else:
                    cur_res[0].append(v1[0][0])
                    cur_res[1].append(v1[1][0])
        else:
            for k1,v1 in data_rows_dict.items():
                if not cur_res:
                    cur_res = v1
                else:
                    cur_res[0].append(v1[0][0])

        new_dict["data_rows"] = cur_res
        result.append(new_dict)
    return result


def monthly_cost_gdata(data):
    result = []
    res_dict = {}
    min_max = {}
    xkeys = {}
    for data_dict in data:
        _date = data_dict["d_date"]
        y, m, d = _date.split("-")
        cur_key = "%s-%s"%(y,m)
        name = data_dict["name"]
        _, sm = name.split("-")
        parsed_start_date = datetime.strptime(_date, "%Y-%m-%d")
        formatted_start_date = parsed_start_date.strftime("%B %d, %Y")
        sy = str(int(parsed_start_date.strftime("%y")))
        if cur_key in min_max:
            min_max[cur_key] = [min(min_max[cur_key][0], d),max(min_max[cur_key][1], d)]
        else:
            min_max[cur_key] = [d, d]
        if cur_key not in res_dict:
            res_dict[cur_key] = data_dict
            name_val = "%s-%s/%s/%s"%(str(int(d)), str(int(d)), sm, sy)
            #print(name_val)
            res_dict[cur_key]["name"] = name_val
            #res_dict[cur_key]["d_date"] = "%s-%s-T"%(y, m)
            res_dict[cur_key]["d_date"] = name_val
            xkeys[cur_key] = name_val
            continue
        for k,v in data_dict.items():
            if k == "opacity":
                continue
            if isinstance(v,float):
                res_dict[cur_key][k] += v
                #res_dict[cur_key][k] += round(v,2)
        name_val = "%s-%s/%s/%s"%(str(int(min_max[cur_key][0])), str(int(min_max[cur_key][1])), sm, sy)        
        res_dict[cur_key]["name"] = name_val
        res_dict[cur_key]["d_date"] = name_val
        xkeys[cur_key] = name_val
    
    #new_res_list =  list(res_dict.values())
    #for k in new_res_list:
    #    k["Total"] = round(k["Total"],2)
    return list(res_dict.values()), list(xkeys.values())
    #return new_res_list, list(xkeys.values())


           
def customerUsageDetails_daily(data_dict = {}):
    filter_subs = data_dict.get("subscriptions", [])
    flag = data_dict.get("flag", [])
    userid = data_dict.get("userid", '')
    domains = data_dict.get("domains", [])
    filter_payload = data_dict.get("filter", [])
    cust_id = data_dict.get("cust_id",0)
    new_subs = get_subscription_for_domain(domains, cust_id)
    user_flag, assigned_subs = dbApi.get_assigned_subs(db_str_mysql_new, userid, domains)
    if not user_flag:
        if "domains" in data_dict.get("filter", []) and "subscriptions" in data_dict.get("filter", []):
            subs =list(set(filter_subs+new_subs))
        elif "domains" in data_dict.get("filter", []):
            subs = list(set(new_subs))
        else:
            subs = filter_subs
    else:
        subs = list(set(filter_subs)&set(assigned_subs))
    if not flag:
        flag = dbApi.get_permission_new(db_str_mysql_new, userid)[0]
        if flag == '2':
            flag = [0]
        else:
            flag = [int(f) for f in flag.split("#") if f!='2']
    subs = [val.lower() for val in subs]
    all_dates, all_ui_dates, all_months_years = get_all_dates(data_dict.get('date', ['', '']))
    all_ykeys = subs
    final_dict = {}
    data_key_cat = ['date', "regions", "subscriptions", "rproviders", "resource", "currency"]
    #data_key_cat = ['date', "regions", "subscriptions", "rproviders", "resource", "currency", "tags"]
    cust_data = {}
    rid_dict = {}
    for (sub, month_year) in itertools.product(*[subs, all_months_years]):
        sub_new = sub.replace("-", "")
        #collection_name = "%s_%s_CI_P"%(sub_new, month_year)
        collection_name = "%s_%s_CI"%(sub_new, month_year)
        temp_dict, temp_rid_dict = mongo_methods.get_all_cost4(db_str_mongo_new_db, collection_name, sub, all_dates, userid)
        cust_data.update(temp_dict)
        rid_dict.update(temp_rid_dict)
    if cust_data:
        final_dict, all_ykeys = filter_data_new(data_dict, cust_data, data_key_cat, 2, userid, all_dates)
        all_ykeys = subs
    if final_dict:
        file_path = "/home/azureuser/new_dev_icco_api_new_cp/Currency_data.csv"
        final_dict = currency_handler(final_dict, file_path)
        final_gdata_arr_a,final_gdata_arr_p, graph_ykeys = get_graph_data(final_dict, all_ykeys, all_dates, all_ui_dates, flag)
        final_tdata_arr = getFinalDictTable_new(final_dict, all_ykeys, all_dates, all_ui_dates, flag, subs, userid)
    else:
        final_tdata_arr = fill_zero(subs, all_dates, flag)
        final_gdata_arr_a,final_gdata_arr_p, graph_ykeys = [], [], []
        all_ykeys = subs
    ntykeys = ["Total"]+all_ykeys
    ntdata = final_tdata_arr
    # flag 0 -- Partner Cost, flag 1 -- Azure Cost
    if 0 in flag and 1 in flag:
        txkeys = [ "s1", ["A", "P"]]+all_dates
        tx_display_keys =  [ "subscription","currency",  ["Azure", "Partner"]] + all_ui_dates
    elif 1 in flag:
        txkeys = [ "s1", ["P"]]+all_dates
        tx_display_keys =  [ "subscription","currency",  ["Partner"]] + all_ui_dates
    elif 0 in flag:
        txkeys = [ "s1", ["A"]]+all_dates
        tx_display_keys =  [ "subscription","currency",  ["Azure"]] + all_ui_dates
    return {"txkeys":txkeys,"tx_display_keys":tx_display_keys, "tykeys":ntykeys, "tdata":ntdata, "gdata_a":final_gdata_arr_a, "gdata_p":final_gdata_arr_p, "gxkeys":all_ui_dates, "gykeys":graph_ykeys}


def graph_click_new_monthly(data_dict):
    subs = data_dict.get("subscriptions", [])
    flag = data_dict.get("flag", [])
    userid = data_dict.get("userid", '')
    dt_str = data_dict.get("date","")
    dt_str = (dt_str[0].split("T"))[0]
    dates = get_dates_by_string(dt_str)
    #y,m,d = dt_str.split("-")
    if not userid:
        flag = [0,1]
    elif not flag:
        flag = dbApi.get_permission_new(db_str_mysql, userid)[0]
        flag = [int(f) for f in flag.split("#") if f!='2']
    subs = [val.lower() for val in subs]
    #all_dates, all_ui_dates, all_months_years = get_all_dates(data_dict.get('date', ['', '']))
    data_key_cat = ['date', "regions", "subscriptions", "rproviders", "resource", "currency"]
    final_tdata_arr = []
    txkeys = []
    tykeys = []
    tx_display_keys = []
    total_tdata_dict = {}
    for sub in subs:
        sub_new = sub.replace("-", "")
        collection_name = "graph_click_data"
        key_list = []
        temp_dict = {}
        for _date in dates:
            y, m, d = _date.split("-")
            key = "%s_%s_%s%s%s"%(sub_new, userid, y, m, d)
            #key_list.append(key)
            cur_temp_dict = mongo_methods.get_sub_gc_data(db_str_mongo_new_db, collection_name, key)
            #print(cur_temp_dict)
            if not temp_dict:
                temp_dict = cur_temp_dict
                temp_dict["txkeys"][-1] = dt_str
            else:
                if len(cur_temp_dict["tdata"]["data_rows"])>0:
                    temp_dict["tdata"]["data_rows"][0][0] += cur_temp_dict["tdata"]["data_rows"][0][0]
                if len(cur_temp_dict["tdata"]["data_rows"])>1:
                    temp_dict["tdata"]["data_rows"][1][0] += cur_temp_dict["tdata"]["data_rows"][1][0]
        if not temp_dict:
            continue
        temp_tdata = temp_dict["tdata"]
        temp_txkeys = temp_dict["txkeys"]
        temp_tykeys = temp_dict["tykeys"]
        temp_tx_display_keys = temp_dict["tx_display_keys"]
        final_tdata_arr.append(temp_tdata)
        txkeys = temp_txkeys
        tykeys.append(sub)
        tx_display_keys = temp_tx_display_keys
        if not total_tdata_dict:
            total_tdata_dict = copy.deepcopy(temp_tdata)
            total_tdata_dict["s1"] = "Total"
        else:
            if len(temp_tdata["data_rows"])>0:
                total_tdata_dict["data_rows"][0][0] += temp_tdata["data_rows"][0][0]
            if len(temp_tdata["data_rows"])>1:
                total_tdata_dict["data_rows"][1][0] += temp_tdata["data_rows"][1][0]     
    txkeys = ["c1"] + txkeys        
    if total_tdata_dict:
        tykeys = ["Total"] + tykeys
        final_tdata_arr = [total_tdata_dict] + final_tdata_arr
    return {"txkeys":txkeys,"tx_display_keys":tx_display_keys, "tykeys":tykeys, "tdata":final_tdata_arr}

def graph_click_new_daily(data_dict):
    subs = data_dict.get("subscriptions", [])
    flag = data_dict.get("flag", [])
    userid = data_dict.get("userid", '')
    dt_str = data_dict.get("date","")
    dt_str = (dt_str[0].split("T"))[0]
    y,m,d = dt_str.split("-")
    if not userid:
        flag = [0,1]
    elif not flag:
        flag = dbApi.get_permission_new(db_str_mysql, userid)[0]
        flag = [int(f) for f in flag.split("#") if f!='2']
    subs = [val.lower() for val in subs]
    all_dates, all_ui_dates, all_months_years = get_all_dates(data_dict.get('date', ['', '']))
    data_key_cat = ['date', "regions", "subscriptions", "rproviders", "resource", "currency"]
    final_tdata_arr = []
    txkeys = []
    tykeys = []
    tx_display_keys = []
    total_tdata_dict = {}
    for sub in subs:
        sub_new = sub.replace("-", "")
        collection_name = "graph_click_data"
        key = "%s_%s_%s%s%s"%(sub_new, userid, y, m, d)
        temp_dict = mongo_methods.get_sub_gc_data(db_str_mongo_new_db, collection_name, key)
        if not temp_dict:
            continue
        temp_tdata = temp_dict["tdata"]
        temp_txkeys = temp_dict["txkeys"]
        temp_tykeys = temp_dict["tykeys"]
        temp_tx_display_keys = temp_dict["tx_display_keys"]
        final_tdata_arr.append(temp_tdata)
        txkeys = temp_txkeys
        tykeys.append(sub)
        tx_display_keys = temp_tx_display_keys
        if not total_tdata_dict:
            total_tdata_dict = copy.deepcopy(temp_tdata)
            total_tdata_dict["s1"] = "Total"
        else:
            if len(temp_tdata["data_rows"])>0:
                total_tdata_dict["data_rows"][0][0] += temp_tdata["data_rows"][0][0]
            if len(temp_tdata["data_rows"])>1:
                total_tdata_dict["data_rows"][1][0] += temp_tdata["data_rows"][1][0]
    txkeys = ["c1"] + txkeys
    if total_tdata_dict:
        tykeys = ["Total"] + tykeys
        final_tdata_arr = [total_tdata_dict] + final_tdata_arr
    return {"txkeys":txkeys,"tx_display_keys":tx_display_keys, "tykeys":tykeys, "tdata":final_tdata_arr}

def graph_click_new(data_dict):
    filter_by = data_dict["filter_by"]
    if filter_by == "Daily":
        response = graph_click_new_daily(data_dict)
    elif filter_by == "Monthly":
        response = graph_click_new_monthly(data_dict)
    return response

def customerUsageDetails_monthly(data_dict = {}):
    filter_subs = data_dict.get("subscriptions", [])
    flag = data_dict.get("flag", [])
    userid = data_dict.get("userid", '')
    domains = data_dict.get("domains", [])
    filter_payload = data_dict.get("filter", [])
    cust_id = data_dict.get("cust_id",0)
    new_subs = get_subscription_for_domain(domains, cust_id)
    user_flag, assigned_subs = dbApi.get_assigned_subs(db_str_mysql_new, userid, domains)
    if not user_flag:
        if "domains" in data_dict.get("filter", []) and "subscriptions" in data_dict.get("filter", []):
            subs =list(set(filter_subs+new_subs))
        elif "domains" in data_dict.get("filter", []):
            subs = list(set(new_subs))
        else:
            subs = filter_subs
    else:
        subs = list(set(filter_subs)&set(assigned_subs))

    if not flag:
        flag = dbApi.get_permission_new(db_str_mysql_new, userid)[0]
        if flag == '2':
            flag = [0]
        else:
            flag = [int(f) for f in flag.split("#") if f!='2']
    subs = [val.lower() for val in subs]
    all_dates, all_ui_dates, all_months_years = get_all_dates(data_dict.get('date', ['', '']))
    all_ykeys = subs
    final_dict = {}
    data_key_cat = ['date', "regions", "subscriptions", "rproviders", "resource", "currency"]
    #data_key_cat = ['date', "regions", "subscriptions", "rproviders", "resource", "currency", "tags"]
    cust_data = {}
    rid_dict = {}
    for (sub, month_year) in itertools.product(*[subs, all_months_years]):
        sub_new = sub.replace("-", "")
        collection_name = "%s_%s_CI"%(sub_new, month_year)
        temp_dict, temp_rid_dict = mongo_methods.get_all_cost4(db_str_mongo_new_db, collection_name, sub, all_dates, userid)
        cust_data.update(temp_dict)
        rid_dict.update(temp_rid_dict)
    if cust_data:
        final_dict, all_ykeys = filter_data_new(data_dict, cust_data, data_key_cat, 2, userid, all_dates)
        all_ykeys = subs
    if final_dict:
        file_path = "/home/azureuser/new_dev_icco_api_new_cp/Currency_data.csv"
        final_dict = currency_handler(final_dict, file_path)
        final_gdata_arr_a,final_gdata_arr_p, graph_ykeys = get_graph_data(final_dict, all_ykeys, all_dates, all_ui_dates, flag, 0)
        final_gdata_arr_a, cur_ui_dates = monthly_cost_gdata(final_gdata_arr_a)
        final_gdata_arr_p, _ = monthly_cost_gdata(final_gdata_arr_p)
        final_tdata_arr = getFinalDictTable_new(final_dict, all_ykeys, all_dates, all_ui_dates, flag, subs, userid)
        final_tdata_arr = monthly_cost_tdata_new2(final_tdata_arr, all_dates)
        all_ui_dates = cur_ui_dates
    else:
        final_tdata_arr = fill_zero(subs, all_ui_dates, flag)
        final_gdata_arr_a,final_gdata_arr_p, graph_ykeys = [], [], []
        all_ykeys = subs
    ntykeys = ["Total"]+all_ykeys
    ntdata = final_tdata_arr
    #print(ntdata[0]["data_rows"])
    # flag 0 -- Partner Cost, flag 1 -- Azure Cost
    if 0 in flag and 1 in flag:
        #txkeys = [ "s1", ["A", "P"]]+all_dates
        txkeys = [ "s1", ["A", "P"]]+all_ui_dates
        tx_display_keys =  [ "subscription","currency",  ["Azure", "Partner"]] + all_ui_dates
    elif 1 in flag:
        #txkeys = [ "s1", ["P"]]+all_dates
        txkeys = [ "s1", ["P"]]+all_ui_dates
        tx_display_keys =  [ "subscription","currency",  ["Partner"]] + all_ui_dates
    elif 0 in flag:
        #txkeys = [ "s1", ["A"]]+all_dates
        txkeys = [ "s1", ["A"]]+all_ui_dates
        tx_display_keys =  [ "subscription","currency",  ["Azure"]] + all_ui_dates
    return {"txkeys":txkeys,"tx_display_keys":tx_display_keys, "tykeys":ntykeys, "tdata":ntdata, "gdata_a":final_gdata_arr_a, "gdata_p":final_gdata_arr_p, "gxkeys":all_ui_dates, "gykeys":graph_ykeys}


def customerUsageDetails(data_dict = {}):
    filter_by = data_dict["filter_by"]
    if filter_by == "Daily":
        response = customerUsageDetails_daily(data_dict)
    elif filter_by == "Monthly":
        response = customerUsageDetails_monthly(data_dict)
    elif filter_by == "Weekly":
        response = customerUsageDetails_weekly(data_dict)
    return response


if __name__ == '__main__':
    payload = {
    "subscriptions": [
        "0776e6d4-034b-4ffe-9f1e-57d2205a6a0f"
    ],
    "regions": [
        "centralindia",
        "eastus"
    ],
    "rproviders": [
        "microsoft.recoveryservices",
        "microsoft.storage",
        "microsoft.compute",
        "microsoft.operationalinsights",
        "microsoft.automation"
    ],
    "date": [
        "20-26/Dec/23T00:00:00.0000000Z",
        "20-26/Dec/23T00:00:00.0000000Z"
    ],
    "filter": [],
    "flag": [],
    "cust_id": 116,
    "userid": 48,
    "filter_by": "Monthly"
}
    #graph_click_new(payload)
    payload = {
    "subscriptions": [
        "786ada36-08dd-4148-b5f5-d284a018820a",
        "dr_auctusgroup_ri_cost"
    ],
    "regions": [
        "centralus",
        "centralindia"
    ],
    "rproviders": [
        "microsoft.compute",
        "microsoft.network",
        "microsoft.storage"
    ],
    "date": [
        "2024-1-21T00:00:00.0000000Z",
        "2024-1-27T00:00:00.0000000Z"
    ],
    "filter": [],
    "flag": [],
    "userid": 48,
    "cust_id": 133,
    "domains": [
        "p7desktopready.onmicrosoft.com"
    ],
    "filter_by": "Daily"
}
    print(customerUsageDetails(payload))
